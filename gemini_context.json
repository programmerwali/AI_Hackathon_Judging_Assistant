{
    "hackathon_goals": "Hackathon Judging Criteria:\n\n1. **Innovation (25%)** \u2013 How novel and unique is the idea?\n2. **Technical Complexity (25%)** \u2013 How challenging was the implementation?\n3. **Usability & Design (20%)** \u2013 Is it user-friendly?\n4. **Business & Impact (15%)** \u2013 Does it solve a real problem?\n5. **Presentation & Demo (15%)** \u2013 How well was it pitched?\n\nSubmissions must include a README file and a video demo.",
    "extracted_text": "import tensorflow as tf\nimport numpy as np\nfrom tensorflow.keras.applications.mobilenet_v2 import preprocess_input\nfrom tensorflow.keras.applications import MobileNetV2\nfrom tensorflow.keras.preprocessing import image\nimport sys\n# Load pre-trained MobileNetV2 model\nmodel = MobileNetV2(weights=\"imagenet\")\ndef load_and_preprocess_image(img_path):\n\"\"\"Load image and preprocess it for MobileNetV2.\"\"\"\nimg = image.load_img(img_path, target_size=(224, 224)) # Resize to model input size\nimg_array = image.img_to_array(img)\nimg_array = np.expand_dims(img_array, axis=0) # Add batch dimension\nimg_array = preprocess_input(img_array) # Normalize pixels\nreturn img_array\ndef predict_cat(img_path):\n\"\"\"Predict if an image contains a cat.\"\"\"\nimg_array = load_and_preprocess_image(img_path)\n# Run prediction\npredictions = model.predict(img_array)\ndecoded_predictions = tf.keras.applications.mobilenet_v2.decode_predictions(predictions,\ntop=3)[0]\n# Check if 'cat' is in the top predictions\nfor label in decoded_predictions:\nclass_name, confidence = label[1], label[2]\nprint(f\"Detected: {class_name} ({confidence * 100:.2f}%)\")\nif \"cat\" in class_name.lower():\nreturn f\"\u2705 It's a Cat! Confidence: {confidence * 100:.2f}%\"\nreturn \"\u274c No Cat Detected.\"\nif __ name__ == \"\nmain__\":\n__\nif len(sys.argv) < 2:\nprint(\"Usage: python cat_detector.py \")\nsys.exit(1)\nimage_path = sys.argv[1]\nresult = predict_cat(image_path)\nprint(result)"
}